// src/components/DrawManagement/DrawCalendar.tsx
import React, { useState, useEffect } from 'react';
import { Calendar, Badge } from 'antd';
import type { Dayjs } from 'dayjs';
import dayjs from 'dayjs';
import { DrawResponse } from '../../types/api';
import { DrawStatus } from '../../types/common';
import './DrawCalendar.css';

interface DrawCalendarProps {
  draws?: DrawResponse[];
  onDateSelect: (date: string) => void;
  selectedDate?: string;
  disabledDates?: string[];
  loading?: boolean;
}

/**
 * Calendar component for draw date selection
 */
const DrawCalendar: React.FC<DrawCalendarProps> = ({
  draws = [],
  onDateSelect,
  selectedDate,
  disabledDates = [],
  loading = false
}) => {
  const [selectedValue, setSelectedValue] = useState<Dayjs | undefined>(
    selectedDate ? dayjs(selectedDate) : undefined
  );

  // Update selected value when selectedDate prop changes
  useEffect(() => {
    if (selectedDate) {
      setSelectedValue(dayjs(selectedDate));
    } else {
      setSelectedValue(undefined);
    }
  }, [selectedDate]);

  // Handle date selection
  const onSelect = (value: Dayjs) => {
    setSelectedValue(value);
    onDateSelect(value.format('YYYY-MM-DD'));
  };

  // Get draw status for a specific date
  const getDrawStatus = (date: Dayjs): DrawStatus | undefined => {
    const dateStr = date.format('YYYY-MM-DD');
    const draw = draws.find(d => d.drawDate === dateStr);
    return draw?.status as DrawStatus;
  };

  // Check if a date is disabled
  const isDateDisabled = (date: Dayjs): boolean => {
    const dateStr = date.format('YYYY-MM-DD');
    return disabledDates.includes(dateStr);
  };

  // Render date cell content
  const dateCellRender = (date: Dayjs) => {
    const status = getDrawStatus(date);
    
    if (!status) return null;
    
    let badgeColor = '';
    switch (status) {
      case DrawStatus.COMPLETED:
        badgeColor = 'green';
        break;
      case DrawStatus.PENDING:
        badgeColor = 'blue';
        break;
      case DrawStatus.FAILED:
        badgeColor = 'red';
        break;
      default:
        badgeColor = 'default';
    }
    
    return (
      <div className="draw-calendar-badge-container">
        <Badge status={badgeColor as any} text={status} />
      </div>
    );
  };

  return (
    <div className="draw-calendar-container">
      <Calendar
        fullscreen={false}
        onSelect={onSelect}
        dateCellRender={dateCellRender}
        value={selectedValue}
        disabledDate={date => isDateDisabled(date)}
        className={loading ? 'draw-calendar-loading' : ''}
      />
      {loading && (
        <div className="draw-calendar-loading-overlay">
          <div className="draw-calendar-loading-spinner" />
        </div>
      )}
    </div>
  );
};

export default DrawCalendar;
