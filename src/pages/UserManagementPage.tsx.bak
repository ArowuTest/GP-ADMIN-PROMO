// src/pages/UserManagementPage.tsx
import React, { useState } from 'react';
import { Tabs } from 'antd';
import { UnorderedListOutlined, FormOutlined } from '@ant-design/icons';
import UserList from '../components/UserManagement/UserList';
import UserForm from '../components/UserManagement/UserForm';
import { useUserManagement } from '../hooks/useUserManagement';
import { UserResponse, UserCreateRequest, UserUpdateRequest } from '../types/api';
import { usePermission } from '../hooks/usePermission';
import './UserManagementPage.css';

const { TabPane } = Tabs;

/**
 * User Management Page Component
 */
const UserManagementPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<string>('list');
  const [selectedUser, setSelectedUser] = useState<UserResponse | undefined>(undefined);
  const { canManageUsers } = usePermission();
  
  const {
    isLoading,
    createUser,
    updateUser
  } = useUserManagement();
  
  // Handle add button click
  const handleAdd = () => {
    setSelectedUser(undefined);
    setActiveTab('form');
  };
  
  // Handle edit button click
  const handleEdit = (user: UserResponse) => {
    setSelectedUser(user);
    setActiveTab('form');
  };
  
  // Handle form submission
  const handleSubmit = async (values: UserCreateRequest | UserUpdateRequest) => {
    try {
      if (selectedUser) {
        await updateUser(selectedUser.id, values as UserUpdateRequest);
      } else {
        await createUser(values as UserCreateRequest);
      }
      setActiveTab('list');
    } catch (error) {
      console.error('Form submission error:', error);
    }
  };
  
  // Handle tab change
  const handleTabChange = (key: string) => {
    setActiveTab(key);
    if (key === 'list') {
      setSelectedUser(undefined);
    }
  };
  
  return (
    <div className="user-management-page">
      <Tabs activeKey={activeTab} onChange={handleTabChange} className="user-tabs">
        <TabPane 
          tab={
            <span>
              <UnorderedListOutlined />
              Users
            </span>
          } 
          key="list"
        >
          <UserList 
            onEdit={handleEdit} 
            onAdd={handleAdd} 
          />
        </TabPane>
        {canManageUsers() && (
          <TabPane 
            tab={
              <span>
                <FormOutlined />
                {selectedUser ? 'Edit' : 'Create'} User
              </span>
            } 
            key="form"
          >
            <UserForm 
              initialValues={selectedUser} 
              onSubmit={handleSubmit}
              loading={isLoading}
            />
          </TabPane>
        )}
      </Tabs>
    </div>
  );
};

export default UserManagementPage;
